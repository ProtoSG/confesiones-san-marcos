---
import SubTitle from "../SubTitle.astro";
import AcademiaLogo from "../icons/AcademiaLogo.astro";

import { getAcademias, onGetAcademias } from "../../services/main.js";

interface Academia {
  id: string;
  name: string;
  image: string;
  votes: number;
}

async function listAcademias(): Promise<Academia[]> {
  const snapshot = await getAcademias();
  const academias: Academia[] = [];

  snapshot.forEach((doc) => {
    academias.push({
      id: doc.id,
      name: doc.data().name,
      image: doc.data().image,
      votes: doc.data().votes,
    });
  });

  return academias;
}

const academias = await listAcademias();

const firstPlaces = academias.slice(0, 3);
---

<section id="academias">
  <SubTitle><AcademiaLogo class="size-9" /> Academias</SubTitle>
  <div class="flex flex-col items-center mt-16 gap-12">
    <div
      class="flex w-full h-96 gap-12 md:w-8/12 justify-between items-end relative"
    >
      {
        firstPlaces.map((academia, index) => (
          <div
            class={`flex flex-col items-center ${index === 0 ? "absolute top-0 left-2/4 -translate-x-2/4 " : "block"}`}
          >
            <span class="bg-secundary px-6 py-3 rounded-3xl text-2xl mb-4">
              {index + 1}
            </span>
            <img
              src={academia.image}
              alt={academia.name}
              class="w-32 h-32 rounded-full"
            />
            <p class="text-white text-2xl mt-4 mb-2">{academia.name}</p>
            <p class="text-white/60 text-xl mb-4">{academia.votes} votos</p>
          </div>
        ))
      }
    </div>
    <div class="flex gap-4">
      <button
        class="border-2 border-white/60 py-4 rounded-3xl text-xl mt-4 px-4 hover:bg-white/10 hover:border-white/20 transition-all hover:scale-110"
        id="vote"
        class=""
      >
        Realiza tu voto
      </button>
      <button
        class="border-2 border-white/60 py-4 rounded-3xl text-xl mt-4 px-4 hover:bg-secundary/80 hover:border-white/20 transition-all hover:scale-110 bg-secundary/50 hidden"
        id="singOut"
      >
        salir
      </button>
    </div>
  </div>

  <dialog id="dialog" class="backdrop:bg-black/40 rounded-2xl text-white/80">
    <div class="rounded-xl px-8 py-10 lg:px-20 lg:py-10 relative">
      <span
        class="absolute right-4 top-4 cursor-pointer text-2xl"
        id="closeModal">x</span
      >
      <h3 class="text-2xl text-center mb-4">Realiza tu voto</h3>
      <form class="flex flex-col gap-4 w-[320px]" id="form">
        {
          academias.map((academia: any) => (
            <div class="flex items-center ps-4 border border-gray-200 rounded dark:border-gray-700">
              <label class="w-full py-4 ms-2 text-lg flex gap-4 items-center font-medium text-gray-900 dark:text-gray-300 ">
                <input
                  type="radio"
                  name="academiaId"
                  value={academia.id}
                  data-value={academia.votes}
                  id={academia.id}
                  class="w-4 h-4 text-secundary bg-gray-700 border-gray-600 rounded"
                />
                {academia.name}
              </label>
            </div>
          ))
        }
        <button
          class="border-2 border-white/60 py-4 rounded-3xl text-2xl mt-4 hover:bg-white/10 hover:border-white/20 transition-all hover:scale-110"
          >Votar</button
        >
        <span
          class="text-center text-xl text-secundary font-semibold"
          id="userVoted"></span>
      </form>
    </div>
  </dialog>
</section>

<script>
  const vote = document.getElementById("vote");

  import { signInWithPopup, GoogleAuthProvider, signOut } from "firebase/auth";

  import { auth, provider } from "../../services/main.js";

  const dialog = document.getElementById("dialog") as HTMLDialogElement;

  vote?.addEventListener("click", () => {
    const user = auth.currentUser;

    if (!user) {
      signInWithPopup(auth, provider)
        .then((result) => {
          const credential = GoogleAuthProvider.credentialFromResult(result);
          const user = result.user;
          if (user) {
            window.location.href = "#academias";
          } else {
            dialog.close();
          }
        })
        .catch((error) => {
          const errorCode = error.code;
          const errorMessage = error.message;
          console.error(errorCode, errorMessage);
        });
    }
    dialog.showModal();
  });

  const singOut = document.getElementById("singOut");
  singOut?.addEventListener("click", () => {
    signOut(auth)
      .then(() => {
        window.location.reload();
      })
      .catch((error) => {
        console.error(error);
      });
  });

  import { onAuthStateChanged } from "firebase/auth";
  onAuthStateChanged(auth, (user) => {
    if (user) {
      singOut?.classList.remove("hidden");
    } else {
    }
  });

  // Submit vote
  import { updateVotes, getUsers, saveUser } from "../../services/main.js";
  import { doc } from "firebase/firestore";

  const form = document.getElementById("form");
  const span = document.getElementById("userVoted");

  form?.addEventListener("submit", async (e) => {
    const academia = document.querySelector(
      'input[name="academiaId"]:checked'
    ) as HTMLInputElement;

    const academiaId = academia.value;
    const academiaVotes = academia.getAttribute("data-value") ?? "0";

    const user = auth.currentUser;

    const users = await getUsers();

    let userVoted = false;

    users.forEach((doc) => {
      if (user && user.uid === doc.data().id) {
        userVoted = true;
        if (span) span.innerText = "Usted ya votÃ³";
        return;
      }
    });

    if (user && !userVoted) {
      updateVotes(academiaId, parseInt(academiaVotes));
      saveUser(user?.uid, true);
      dialog.close();
    }
  });

  const closeModal = document.getElementById("closeModal");

  closeModal?.addEventListener("click", () => {
    dialog.close();
  });
</script>
